# **Binary Search Trees (BST) - Конспект**
#
# **Определение:** Двоичное дерево поиска (BST) - это структура данных, представляющая собой бинарное дерево,
# где каждый узел содержит значение (ключ) и два поддерева - левое и правое. При этом для каждого узла все значения в
# левом поддереве меньше его значения, а все значения в правом поддереве больше.
#
# **Основные свойства:** 1. **Упорядоченность:** Элементы в BST упорядочены согласно свойству, что для каждого узла
# все значения в его левом поддереве меньше его значения, а все значения в правом поддереве больше.
#
# 2. **Эффективность:** - Время выполнения основных операций (вставка, поиск, удаление) в сбалансированных BST
# составляет O(log n), где n - количество узлов. - Операции в несбалансированных BST могут иметь худшую
# производительность (O(n)), если дерево становится вырожденным в связи с неправильным порядком вставки.
#
# **Операции:**
# 1. **Вставка (Insertion):**
#    - Начинаем с корня и спускаемся по дереву, сравнивая значения и вставляя новый узел в соответствующее место.
#    - Вставка в сбалансированном дереве поддерживает логарифмическое время выполнения.
#
# 2. **Поиск (Search):**
#    - Начинаем с корня и спускаемся по дереву, сравнивая значения, чтобы найти искомый элемент.
#    - Время выполнения также логарифмическое в сбалансированном дереве.
#
# 3. **Удаление (Deletion):**
#    - Находим узел для удаления, учитывая три возможных случая (нет потомков, один потомок, два потомка).
#    - Поддерживает логарифмическое время выполнения в сбалансированных деревьях.
#
# **Сбалансированные и Несбалансированные BST:**
# 1. **Сбалансированные BST:**
#    - Гарантируют, что высота левого и правого поддеревьев различается не более чем на 1.
#    - AVL-деревья и красно-черные деревья - примеры сбалансированных BST.
#
# 2. **Несбалансированные BST:**
#    - В них высота поддеревьев может значительно различаться, что может привести к ухудшению производительности.
#
# **Применения:**
# - Хранение отсортированных данных.
# - Эффективный поиск, вставка и удаление элементов.
#
# **Заключение:** BST предоставляют эффективную структуру данных для упорядоченного хранения, поиска и обработки
# данных. Сбалансированные BST поддерживают логарифмическое время выполнения, что делает их предпочтительными во
# многих приложениях.