"""Decorators"""
# Декораторы - это механизм Python позволяющий изменять поведение функций
#               или методов без изменения их кода.

# Существует два основных типа декораторов в Python:
#
# Функциональные декораторы - это декораторы, которые определяются как функции.
# Классовые декораторы - это декораторы, которые определяются как классы.
'''Основные концепции'''
# Функции высших порядков: Функции, которые могут принимать другие функции в качестве
#                          аргументов или возвращать функции.
# Замыкания (closures): Функции, сохраняющие значения из окружающего контекста.

'''Создание декоратора:'''
def repeat(n):
    def decorator(func):
        def wrapper(*args, **kwargs):
            for _ in range(n):
                func(*args, **kwargs)
        return wrapper
    return decorator

'''Применение декоратора:'''
@repeat(300)
def say_hello():
    print("Привет!")
say_hello()
''' Встроенные декораторы и библиотеки '''
# @staticmethod и @classmethod: Декораторы для работы с методами класса.
# @property: Превращение метода в атрибут для удобства доступа.