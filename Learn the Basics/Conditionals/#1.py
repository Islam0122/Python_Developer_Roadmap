"""Condintions"""

# Условные операторы
# Условные операторы используются для выполнения кода в зависимости
# от истинности или ложности логического выражения.
# В Python существует три условных оператора:
#
# if: Условный оператор. Если выражение истинно,
#     выполняется блок кода, заключенный в фигурные скобки.
# elif: Альтернативный условный оператор. Если выражение истинно,
#       выполняется блок кода, заключенный в фигурные скобки, после которого следует оператор elif.
# else: Оператор по умолчанию. Если ни одно из выражений не истинно,
#       выполняется блок кода, заключенный в фигурные скобки, после которого следует оператор else.
# Логические операторы:
# and: Логическое И. Возвращает True, если оба условия истинны.
# or: Логическое ИЛИ. Возвращает True, если хотя бы одно из условий истинно.
# not: Логическое НЕ. Инвертирует значение условия.


'''Цикл for'''
#
# Цикл for используется в Python для выполнения блока кода для каждого элемента коллекции.
# Коллекцией может быть список,кортеж, строка, словарь или любой другой объект,
# поддерживающий итерацию.
for i in range(1, 11):
    print(i)
# break: Прерывает выполнение цикла.
# continue: Переходит к следующему элементу коллекции, не выполняя оставшийся код блока.
# else: Выполняется, если цикл завершился не по оператору break.
# Использование оператора `break`

for i in range(1, 11):
    if i == 5:
        break
    print(i)

# Использование оператора `continue`

for i in range(1, 11):
    if i % 2 == 0:
        continue
    print(i)

# Использование оператора `else`

for i in range(1, 11):
    print(i)
else:
    print("Цикл завершен")

'''Цикл while'''
# Цикл while используется в Python для выполнения блока кода, пока значение выражения истинно.

i = 1
while i <= 10:
    print(i)
    i += 1
# Цикл while работает следующим образом:
#
# Выражение expression вычисляется.
# Если выражение истинно, блок кода выполняется.
# Шаг 1 повторяется, пока выражение expression не станет ложным.

# break: Прерывает выполнение цикла.
# continue: Переходит к следующему проходу цикла, не выполняя оставшийся код блока

# Использование оператора `break`

i = 1

while i <= 10:
    if i == 5:
        break
    print(i)
    i += 1

# Использование оператора `continue`

i = 1

while i <= 10:
    if i % 2 == 0:
        i += 1
        continue
    print(i)
    i += 1